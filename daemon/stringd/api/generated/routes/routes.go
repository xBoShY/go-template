// Package routes provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package routes

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Process a dummy request
	// (POST /)
	Request(c *fiber.Ctx) error
	// Returns OK if healthy.
	// (GET /health)
	HealthCheck(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Request operation middleware
func (siw *ServerInterfaceWrapper) Request(c *fiber.Ctx) error {

	return siw.Handler.Request(c)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *fiber.Ctx) error {

	return siw.Handler.HealthCheck(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/", wrapper.Request)

	router.Get(options.BaseURL+"/health", wrapper.HealthCheck)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVS2/cNhD+K8S0N8uS0xY97M1NE9jIIUYaI4fIB644KzEmhwwfuxaM/e8FKWofWefV",
	"NkBvEjkz/Ob75vEIndHWEFLwsHgE3w2oef58GakL0lD6RooaFu/B4RqdR6ggWosOKlBmgw7uKgijRViA",
	"D05SD9sK3uDHiD4kd+uMRRck5sCrEjj/yIA6f/zscAUL+KnZA2oKmmYHZbt7hzvHx/Sv0XveYwpxAiFI",
	"jT5wbQ9uJQXsM/SH896c709//y27BPXtxjFKcfrwsXGyqW9vr/88PD+X2hqXuSGuZzOowPIwwAJ6GYa4",
	"rDujm4el8cPYJEfUVvGATQxSNdlhu91W4PBjlA5FEmhmozpgeS+OWX7ALkzieGvI46k6RWJx/iVi/3+J",
	"n8AuIE+TT56SViZhEOg7J+1U5vDcaG2IBd4z6ZnD9KZgwTCPbi07ZD7wED1U4KPW3I2wgEtilzfXyWjg",
	"JFSySVx4pjlJGxVPsZmbeiG5BhlUgvNXsbu8uYYKEvgJxLP6or5IHBuLxK2EBfyajyaOskZNls1MzXWc",
	"wyUTUetxfpF1hgKX5BknlnuGmdWMsSVOgoUBdwlupFLMoVUj28gwHDq1lAxnmucQNWSgLqd5LWCxa/tJ",
	"HvThDyPGhDMhQcqQubVKdtmnWZOoi+XZ+tnZB18mzgPXVk0l2cIVKmXYO+OUaCHPqb0AzEvqd8RX7FPr",
	"CtZcxUT5+7vEa7lv4ayFJyO+3Zg5vV20Fljiau9xHHVblcn5tUk2s5M8vsCC9r3l3f0PI0L8GCbE91FR",
	"RlDuyOMqfjsgW44BGVJnBIq5nOuWXhyfeNZxYktMhd7xgJR6tobD4RBcxDwtpvcyk79cXPzbmhTKmXfM",
	"KIVXn5Xik3ZJvff18iwhz8oTT4mS4+678CDuf1eo36XOZFy39NI4pqMK0ub0C+VVmjJ0Yu8Zd9+gnMAV",
	"j+qJYXdL92Q2xF44Z9yU3I6mG2c69J7x44GYrZoBuUr75hF6zHGPZ9hVvn4+YHcPTxfOMY7Xr2r4pzjf",
	"YIiOPHv9iskVm4CNiYbAe582W5e3EtxlIcrhZzYXkrBGUt4zZb0W7+3d9u8AAAD//xt5tCHrCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
